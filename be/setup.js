#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setup() {
    console.log('üöÄ Cross-Border Payment System Setup');
    console.log('====================================\n');

    console.log('This script will help you configure your smart contract integration.\n');

    // Get contract address
    const contractAddress = await question('Enter your deployed smart contract address: ');
    if (!contractAddress.startsWith('0x') || contractAddress.length !== 42) {
        console.log('‚ùå Invalid contract address format');
        process.exit(1);
    }

    // Get private key
    const privateKey = await question('Enter your wallet private key (without 0x prefix): ');
    if (privateKey.length !== 64) {
        console.log('‚ùå Invalid private key format');
        process.exit(1);
    }

    // Get RPC URL
    console.log('\nCommon RPC URLs:');
    console.log('- Sepolia: https://eth-sepolia.g.alchemy.com/v2/YOUR_API_KEY');
    console.log('- Mainnet: https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY');
    console.log('- Polygon: https://polygon-mainnet.g.alchemy.com/v2/YOUR_API_KEY');

    const rpcUrl = await question('Enter your RPC URL: ');
    if (!rpcUrl.startsWith('http')) {
        console.log('‚ùå Invalid RPC URL format');
        process.exit(1);
    }

    // Determine network
    let networkName = 'Unknown';
    let chainId = 1;

    if (rpcUrl.includes('sepolia')) {
        networkName = 'Sepolia Testnet';
        chainId = 11155111;
    } else if (rpcUrl.includes('mainnet')) {
        networkName = 'Ethereum Mainnet';
        chainId = 1;
    } else if (rpcUrl.includes('polygon')) {
        networkName = 'Polygon Mainnet';
        chainId = 137;
    }

    // Create config
    const config = {
        CONTRACT_ADDRESS: contractAddress,
        PRIVATE_KEY: privateKey,
        RPC_URL: rpcUrl,
        NETWORK: {
            name: networkName,
            chainId: chainId,
            currency: "ETH"
        },
        GAS_SETTINGS: {
            gasLimit: 500000,
            gasPrice: null
        }
    };

    // Write config file
    const configContent = `// Smart Contract Configuration
// Generated by setup script on ${new Date().toISOString()}

module.exports = ${JSON.stringify(config, null, 4)};`;

    fs.writeFileSync(path.join(__dirname, 'config.js'), configContent);

    console.log('\n‚úÖ Configuration saved to config.js');
    console.log('\nüìã Summary:');
    console.log(`   Contract Address: ${contractAddress}`);
    console.log(`   Network: ${networkName}`);
    console.log(`   Chain ID: ${chainId}`);
    console.log('\nüîß Next steps:');
    console.log('1. Make sure your ABI file is at ./contract/abi.json');
    console.log('2. Run: npm install');
    console.log('3. Start the server: node main.js');
    console.log('4. Test the integration: node test-backend.js');

    console.log('\n‚ö†Ô∏è  Security Note:');
    console.log('   Never commit your private key to version control!');
    console.log('   Consider using environment variables in production.');

    rl.close();
}

setup().catch(console.error); 